package alfin.weatheriot;


import org.apache.http.HttpEntity; // Import for handling HTTP entities
import org.apache.http.client.methods.CloseableHttpResponse; // Import for handling HTTP responses
import org.apache.http.client.methods.HttpGet; // HTTP GET method implementation
import org.apache.http.impl.client.CloseableHttpClient; // Closeable HTTP client
import org.apache.http.impl.client.HttpClients; // HTTP client factory
import org.apache.http.util.EntityUtils; // Utility for handling HTTP entities
import org.json.JSONObject; // JSON object handling


import java.io.IOException; // Import for handling IO exceptions
import java.util.Scanner; // Scanner for user input

public class WeatherIoT {
    

    private static final String API_KEY = "0413257f4fadf61b018c2267ffa50a39";  //My OpenWeatherMap API key
    private static final String BASE_URL = "http://api.openweathermap.org/data/2.5/weather"; // Base URL for OpenWeatherMap API


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter city name: ");
        String city = scanner.nextLine();
        try {
            String weatherData = getWeatherData(city);
            if (weatherData != null) {
                parseAndDisplayWeatherData(weatherData, city);
            } else {
                System.out.println("City not found or unable to retrieve data.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
      // Method to retrieve weather data from OpenWeatherMap API
    private static String getWeatherData(String city) throws IOException {
        String url = BASE_URL + "?q=" + city + "&appid=" + API_KEY + "&units=metric";
        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(url);
            try (CloseableHttpResponse response = httpClient.execute(request)) {
                if (response.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        return EntityUtils.toString(entity);
                    }
                }
            }
        }
        return null;
    }
     // Method to parse and display weather data
    private static void parseAndDisplayWeatherData(String weatherData, String city) {
        JSONObject jsonObject = new JSONObject(weatherData);
        double temperature = jsonObject.getJSONObject("main").getDouble("temp");
        String weatherDescription = jsonObject.getJSONArray("weather").getJSONObject(0).getString("description");

        System.out.println("The current temperature in " + city + " is " + temperature + "Â°C.");
        System.out.println("Weather description: " + weatherDescription + ".");
    }
}
